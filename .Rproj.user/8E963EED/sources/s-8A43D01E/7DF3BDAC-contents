---
title: "Semi-supervised Mapper"
author: ""
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

# Introduction

This package aims to provide an easy and flexible way to explore the visualization of data based on Mapper, a topological data analysis method, It provides users with extensive tools to customize the visualization, optimally select filter functions and evaluate the results from Mapper.

To install the latest version of this R package directly from github:
```
install.package("devtools")
devtools::install_github(TianshuFeng/SemiMapper)
```

# Example 1: Simple graph generation with SemiMapper.

## Start with the simulation data

This package provides a function `chicken_generator` to generate simulation data which is similar to a chicken foot. We will use it to demostrate the tools of this package.

We start by applying Mapper directly to the simulated data with function `mapper.kmeans` and generate a graph with the basic visualization function `simple_visNet`.

```{r eval=FALSE}
library(SemiMapper)
simu_data <-  chicken_generator(seed = 1)
simu_data_mapper <- mapper.kmeans(dat = simu_data[,2:4],
                               filter_values = simu_data$Y,
                               num_intervals = 10,
                               percent_overlap = 70)
simple_visNet(simu_data_mapper, filter = simu_data$Y, color_filter = TRUE)
```
In `chicken_generator`, the argument `seed` determines the seed to be used in data generation. The first column represent the groups of samples, and the last three columns are the coordinates of samples. 

We apply Mapper to the simulated data with function `mapper.kmeans` modified from function `mapper` in package `TDAmapper`. In `mapper.kmeans`, `dat` is the input data, `filter_values` is the vector of filter. Here we simply use the Y axis as the filter. `num_intervals` and `percent_overlap` are the number of intervals and the percentage of intervals overlapped, respectively, which decides how `simu_data$Y` is convered. 

`simple_visNet` function visualize the graph from `mapper.kmeans`. It is capable of flexibly assigning colors to nodes in the graph. In this example, we set `color_filter = TRUE` and `filter = simu_data$Y`, and the colors of nodes are determined by the average values of filters of samples in the nodes.

## Play with colors

We can also assign colors with the dominated group under each node with 
```{r eval=FALSE}
simple_visNet(simu_data_mapper, color_filter = FALSE, groups_ind = simu_data$Group)
```
The colors will be determined by built-in function `color_map_Spectral()` based on the dominated groups. Users can also define their own color function and pass it to argument `color_fun`. The color function should be able to accept numeric vectors and output hex color codes.

Alternatively, we can specify the colors of groups. This package provides several tools to help the users define colors for the groups. `auto_set_colorcode` is able to automatically generate color codes based on given palette. `read_color_code` can read color codes from local files and turn them into appropriate format, and `check_color_code` checks the validity of provided color code data frame. 

We demostrate these tools with the following codes:
```{r eval=FALSE}
simu_color <- auto_set_colorcode(simu_data$Group, palette = "Set1")
check_color_code(simu_color)
simple_visNet(simu_data_mapper, color_filter = FALSE, 
              groups_ind = simu_data$Group,color_code = simu_color)
```

A full list of supported palettes can be found with function `display.brewer.all()` in package `RColorBrewer`.

# Example 2: Adding details of nodes to graphs.
## Using default summaries
## Adding customized summaries

# Example 3: Use and define different filter functions.

# Example 4: Result evaluation.

# Example 5: Filter function selection with Pareto frontier.

