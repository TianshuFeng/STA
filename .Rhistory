}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
return(res)
}
filter_list = list(a,b,c)
res = NULL
dat = tp_data
group_ind = tp_data$Group
num_intervals = 10
percent_overlap = 70
arg_mapper = list()
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon, tp_spread))
}
res
tp_filter
tp_shannon
tp_spread
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
return(res)
}
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res)
res[,2:3] = as.numeric(res[,2:3])
return(res)
}
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res)
res[,2:3] = lapply(res[,2:3], as.numeric)
return(res)
}
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
a = filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
a[,2]
return(res)
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res)
return(res)
}
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res)
return(res)
}
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
a = filter_eccen(dist = tp_dist, p = 2)
b = filter_coordinate(tp_data[,-1], 2)
c = filter_gaussian(dist=tp_dist, sigma=1)
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res)
res[,2:3] = lapply(res[,2:3], as.numeric)
return(res)
}
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res)
#res[,2:3] = lapply(res[,2:3], as.numeric)
return(res)
}
res = filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
res
res[,2]
/as.data.frame
?as.data.frame
res[,2:3] = lapply(res[,2:3], as.numeric)
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res, stringsAsFactors = FALSE)
res[,2:3] = lapply(res[,2:3], as.numeric)
return(res)
}
filter_evaluate(a,b,c,
dat = tp_data, group_ind = tp_data$Group,
num_intervals = 10, percent_overlap = 70)
mean_dist
print.filter = function(x) {
cat("This is the filter vecter returned by", attributes(x)$filter, ".\n", sep = "")
}
print(a)
print.filter = function(x) {
cat("This is the filter vecter returned by ", attributes(x)$filter, ".\n", sep = "")
}
print(a)
print.filter = function(x) {
cat("This is the filter vecter returned by ",
attributes(x)$filter, " filter function.\n", sep = "")
}
print(a)
#'                 num_intervals = 10, percent_overlap = 70)
#'
#' # Add additional arguments (NOT RUN)
#' if(FALSE) {
#'   filter_evaluate(a,b,c,
#'                   dat = tp_data, group_ind = tp_data$Group,
#'                   num_intervals = 10, percent_overlap = 70,
#'                   arg_mapper = list(n_class = 1))
#' }
#'
filter_evaluate = function(..., dat, group_ind, num_intervals, percent_overlap,
arg_mapper = list()) {
filter_list = list(...)
res = NULL
arg_mapper$dat = dat
arg_mapper$group_ind = group_ind
arg_mapper$num_intervals = num_intervals
arg_mapper$percent_overlap = percent_overlap
for(ff in filter_list) {
tp_filter = attributes(ff)$filter
class(ff) = "numeric"
arg_mapper$filter_values = ff
tp_mapper = do.call(mapper.kmeans, arg_mapper)
tp_shannon = mapper_shannon_index(obj_mapper = tp_mapper, group_ind = group_ind)
tp_spread = spread_measure(obj_mapper = tp_mapper, group_ind = group_ind)
res = rbind(res, c(tp_filter, tp_shannon$avg_index, tp_spread))
}
colnames(res) = c("Filter", "weighted_shannon", "spread_index")
res = as.data.frame(res, stringsAsFactors = FALSE)
res[,2:3] = lapply(res[,2:3], as.numeric)
return(res)
}
attr(a, "filter")
devtools::document()
devtools::document()
require(visNetwork)
devtools::document()
?filter_evaluate
devtools::document()
?filter_evaluate
detach("package:TDAmapper", unload=TRUE)
network_visualization(tp_data_mapper, groups_ind = tp_data$Group, dat = tp_data[,2:4],folder = "Exp_network")
#'                       folder = "Exp_network")
#'
#' # Add additional analysis to nodes
#'
#' add_analysis_java = paste0('Node Index:<b>',
#'                            1:length(tp_data_mapper$points_in_vertex),
#'                            '</b><br>')
#' network_visualization(tp_data_mapper, groups_ind = tp_data$Group, dat = tp_data[,2:4],
#'                       folder = "Exp_network", add_analysis_java = add_analysis_java)
#'
network_visualization = function(obj_mapper, groups_ind, dat = NULL, folder = "",
add_surv_analysis = FALSE, add_analysis_java = NULL,
palette = "Set1", legend_ncol = 2,
color_code = NULL){
#  obj_mapper: the mapper object from TDAMapper
#  groups_ind: the vector of group each individual sample belongs to
require(visNetwork)
require(RColorBrewer)
if(class(obj_mapper) != "TDAmapper") {
stop("Invalid obj_mapper.")
}
if(is.null(color_code)){
color_code = auto_set_colorcode(groups = groups_ind,
palette = palette)
} else if(!check_color_code(color_code)){
stop("Invalid color code.")
}
dir.create(file.path(folder), showWarnings = FALSE)
obj_mapper = null_remover(obj_mapper)
MapperNodes <- mapperVertices(obj_mapper, 1)
MapperLinks <- mapperEdges(obj_mapper)
members = c()
for(i in obj_mapper$points_in_vertex){
members = c(members, paste0(i, collapse = ", "))
}
stats_sum = stat_summery(obj_mapper, groups_ind, dat = dat, folder = folder,
add_surv_analysis = add_surv_analysis,
add_analysis_java = add_analysis_java,
color_code = color_code)
nodes <- data.frame(id = 1:nrow(MapperNodes), #label = MapperNodes$Nodename,
value = MapperNodes$Nodesize,
group = stats_sum$dominant_group,
color = color_map(stats_sum$dominant_group,
color_code = color_code),
title = stats_sum$java_desp)
edges <- data.frame(from = MapperLinks$Linksource+1, to = MapperLinks$Linktarget+1)
visNetwork(nodes, edges, width = "100%", height = "700px") %>%
visInteraction(tooltipDelay = 500, selectConnectedEdges = FALSE,
tooltipStyle = 'position: fixed;visibility:hidden;padding: 5px;
white-space: normal;width: 150px;
font-family: cursive;font-size:12px;font-color:purple;background-color: #E6E6E6;
border-radius: 15px;') %>%
visOptions(selectedBy = "group",
highlightNearest = list(enabled =TRUE, degree = 2, hover = T)) %>%
visLegend(addNodes = legend_node(color_code = color_code),
useGroups = FALSE, enabled = TRUE,
width = 0.1, ncol = legend_ncol,
position = "left")  %>% sparkline::spk_add_deps()%>%
visSave(file = "network.html", background = "white")
file.rename(from = "network.html", to = file.path(folder, "network.html"))
}
detach("package:TDAmapper", unload=TRUE)
network_visualization(tp_data_mapper, groups_ind = tp_data$Group, dat = tp_data[,2:4],
folder = "Exp_network", add_analysis_java = add_analysis_java)
tp_data = chicken_generator(1)
tp_data_mapper = mapper.kmeans(dat = tp_data[,2:4],
filter_values = tp_data$Y,
num_intervals = 10,
percent_overlap = 70)
network_visualization(tp_data_mapper, groups_ind = tp_data$Group, dat = tp_data[,2:4],
folder = "Exp_network")
devtools::document()
devtools::document()
devtools::document()
?print.kmeans
print.kmeans
devtools::use_vignette("my-vignette")
install.packages("devtools")
install.packages('G:\My Drive\Mayo_intern files\Projects\Mapper_Visualization\Package\SemiMapper_0.3.tar.gz')
install.packages('G:/My Drive/Mayo_intern files/Projects/Mapper_Visualization/Package/SemiMapper_0.3.tar.gz')
install.packages('G:/My Drive/Mayo_intern files/Projects/Mapper_Visualization/Package/SemiMapper_0.3.tar.gz',repos = NULL, type="source")
install.packages("sparkline")
install.packages('G:/My Drive/Mayo_intern files/Projects/Mapper_Visualization/Package/SemiMapper_0.3.tar.gz',repos = NULL, type="source")
install.packages("formatR")
formatR::tidy_app()
formatR::tidy_app()
formatR::tidy_app()
devtools::check()
tp_data <- chicken_generator(1)
p_dist <- dist(tp_data[,-1])
tp_dist <- dist(tp_data[,-1])
filter_ref(dist=tp_dist, groups_ind=tp_data$Group, ref = "Shank")
diag(tp_dist)
rm(p_dist)
dim(tp_data)
dim(tp_dist)
class(tp_dist)
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
getwd()
?getwd
pkgdown::build_site()
pkgdown::build_site()
devtools::install_github("TianshuFeng/STA")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STA)
simu_data <-  chicken_generator(seed = 1)
simu_data_mapper <- mapper.kmeans(dat = simu_data[,2:4],
filter_values = simu_data$Y,
num_intervals = 10,
percent_overlap = 70)
simple_visNet(simu_data_mapper, filter = simu_data$Y, color_filter = TRUE)
simu_data <- simu_data0
simu_data0 <-  chicken_generator(seed = 1)
simu_data <- simu_data0
require(MASS)
unique.group.vec <- unique(simu_data0$Group)
unique.group.vec
for(k in 1 : length(unique.group.vec)){
# k <- 1
sel.idx <- which(simu_data0$Group == unique.group.vec[k])
mu.vec <- rnorm(3)
sigma.mtx <- diag(3)*2
sigma.mtx[2,3] <- sigma.mtx[3,2] <- runif(1)
sigma.mtx[1,2] <- sigma.mtx[2,1] <- runif(1)
sigma.mtx[1,3] <- sigma.mtx[3,1] <- runif(1)
simu_data[sel.idx,2:4] <-  mvrnorm(n=length(sel.idx), mu = mu.vec, Sigma = sigma.mtx)
}
simu_data0 <-  chicken_generator(seed = 1)
simu_data <- simu_data0
require(MASS)
unique.group.vec <- unique(simu_data0$Group)
for(k in 1 : length(unique.group.vec)){
# k <- 1
sel.idx <- which(simu_data0$Group == unique.group.vec[k])
mu.vec <- rnorm(3)
sigma.mtx <- diag(3)*2
sigma.mtx[2,3] <- sigma.mtx[3,2] <- runif(1)
sigma.mtx[1,2] <- sigma.mtx[2,1] <- runif(1)
sigma.mtx[1,3] <- sigma.mtx[3,1] <- runif(1)
simu_data[sel.idx,2:4] <-  mvrnorm(n=length(sel.idx), mu = mu.vec, Sigma = sigma.mtx)
}
p <- plot_ly(simu_data, x = ~X, y = ~Y, z = ~Z, color = ~Z,type = "scatter3d", # color = I(color_map_Spectral(dd$Y)),
mode = "markers", colors = "Spectral") %>%
layout(scene = list(aspectratio = list(x=1, y=1, z=0.3)))
library(plotly)
p <- plot_ly(simu_data, x = ~X, y = ~Y, z = ~Z, color = ~Z,type = "scatter3d", # color = I(color_map_Spectral(dd$Y)),
mode = "markers", colors = "Spectral") %>%
layout(scene = list(aspectratio = list(x=1, y=1, z=0.3)))
p
simu_data_mapper <- mapper.kmeans(dat = simu_data[,2:4],
filter_values = simu_data$Y,
num_intervals = 10,
percent_overlap = 70)
simple_visNet(simu_data_mapper, filter = simu_data$Y, color_filter = TRUE)
simple_visNet
require(visNetwork)
require(RColorBrewer)
MapperNodes <- STA::mapperVertices(simu_data_mapper, 1)
MapperNodes <- STA:::mapperVertices(simu_data_mapper, 1)
MapperLinks <- STA:::mapperEdges(simu_data_mapper)
?mapperVertices
mapperVertices
MapperNodes <- STA:::mapperVertices(simu_data_mapper, 1)
MapperLinks <- STA:::mapperEdges(simu_data_mapper)
filter = simu_data$Y
if (is.null(color_fun)) {
stop("color_fun not provided")
}
if (is.null(filter)) {
warning("filter not provided, repalced by 1.")
filter <- rep(1, max(unlist(simu_data_mapper$points_in_vertex)))
}
dir.create(file.path(folder), showWarnings = FALSE)
avg_filter <- c()
for (i in simu_data_mapper$points_in_vertex) {
avg_filter <- c(avg_filter, mean(filter[i], na.rm = TRUE))
}
nodes <- data.frame(id = 1:nrow(MapperNodes), value = MapperNodes$Nodesize,
color = color_fun(avg_filter))
?simple_visNet
color_fun = color_map_Spectral
color_fun
nodes <- data.frame(id = 1:nrow(MapperNodes), value = MapperNodes$Nodesize,
color = color_fun(avg_filter))
avg_filter
color_fun(avg_filter)
color_fun
colorRamp(brewer.pal(11, "Spectral"))(-1)
?colorRamp
avg_filter
colorRamp(brewer.pal(11, "Spectral"))(2)
range(avg_filter)
?range
diff(avg_filter)
(avg_filter - min(avg_filter))/(max(avg_filter) - min(avg_filter))
colorRamp(brewer.pal(11, "Spectral"))(0)
colorRamp(brewer.pal(11, "Spectral"))(1)
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
library(pkgdown)
pkgdown::build_site()
pkgdown::build_site()
?pkgdown::build_site()
?pkgdown::build_site()
build_site()
traceback()
pkgdown::build_site()
pkgdown::build_site()
