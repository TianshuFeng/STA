install.packages("roxygen2")
library(roxygen2)
?autoload
?brewer.pal
??brewer.pal
auto_set_colorcode = function(groups, palette = "Set1"){
#' Automatically set color codes for groups
#'
#' \code{auto_set_colorcode} returns a dataframe with group names and color codes.
#'
#' @param groups A vector giving the names of groups. Duplicate group names will be disregarded
#' @param palette A string giving the name of palette provided in \code{\link[RColorBrewer:brewer.pal]{RColorBrewer}}.
#'
#' @return A dataframe that contains color codes for samples from different groups.
#'   The first column consists of names of the groups and the second column contains
#'   the coresponding color codes.
#'
#' @example
#' auto_set_colorcode(c('a','b','c'))
num_groups = length(unique(groups))
if (num_groups <10) {
color_code = data.frame(Study.Abbreviation = unique(groups),
Hex.Colors = brewer.pal(num_groups, palette),
stringsAsFactors = FALSE)
} else {
color_code = data.frame(Study.Abbreviation = unique(groups),
Hex.Colors = colorRampPalette(brewer.pal(9, palette))(num_groups),
stringsAsFactors = FALSE)
}
return(color_code)
}
auto_set_colorcode(c('a','b','c'))
auto_set_colorcode = function(groups, palette = "Set1"){
#' Automatically set color codes for groups
#'
#' \code{auto_set_colorcode} returns a dataframe with group names and color codes.
#'
#' @param groups A vector giving the names of groups. Duplicate group names will be disregarded
#' @param palette A string giving the name of palette provided in \code{\link[RColorBrewer:brewer.pal]{RColorBrewer}}.
#'
#' @return A dataframe that contains color codes for samples from different groups.
#'   The first column consists of names of the groups and the second column contains
#'   the coresponding color codes.
#'
#' @example
#' auto_set_colorcode(c('a','b','c'))
require(RColorBrewer)
num_groups = length(unique(groups))
if (num_groups <10) {
color_code = data.frame(Study.Abbreviation = unique(groups),
Hex.Colors = brewer.pal(num_groups, palette),
stringsAsFactors = FALSE)
} else {
color_code = data.frame(Study.Abbreviation = unique(groups),
Hex.Colors = colorRampPalette(brewer.pal(9, palette))(num_groups),
stringsAsFactors = FALSE)
}
return(color_code)
}
auto_set_colorcode(c('a','b','c'))
?read.table]
?read.table
?sum
devtools::document()
install.packages(ggvis)
devtools::document()
?auto_set_colorcode
devtools::document()
?auto_set_colorcode
?read_color_code
?any
color_code[,2]
temp = auto_set_colorcode(c('a','b','c'))
temp
nchar(color_code[,2]) == 7
nchar(temp[,2]) == 7
substr(temp[,2],
start = 1, stop = 1) == "#"
temp = auto_set_colorcode(c('a','b','c'))
check_color_code(temp)
#' Check the validation of a color code dataframe
#'
#'
#' @param color_code The color code dataframe
#'
#' @export
#'
#' @examples
#' temp = auto_set_colorcode(c('a','b','c'))
#' check_color_code(temp)
check_color_code = function(color_code) {
return(colnames(color_code)[1] == "Study.Abbreviation" &
colnames(color_code)[2] == "Hex.Colors" &
all(nchar(color_code[,2]) == 7 &
substr(color_code[,2],
start = 1, stop = 1) == "#"))
}
temp = auto_set_colorcode(c('a','b','c'))
check_color_code(temp)
color_map = function(samples_group, color_code) {
# Accept a list of acronym and return the corresponding color codes
samples_group = data.frame(id = 1:length(samples_group), Study.Abbreviation = samples_group)
res = merge(samples_group, color_code, by = "Study.Abbreviation", all = FALSE, sort = FALSE)
return(res$Hex.Colors[order(res$id)])
}
temp_code = auto_set_colorcode(c('a
temp_groups = c('a','a','b','c')
color_map(temp_groups, temp_code)
temp_groups = c('a','a','b','c')
temp_code = auto_set_colorcode(c('a','b','c'))
color_map(temp_groups, temp_code)
?TDAMapper
v <- c('a','b','c','e')
subv <- c('a', 'f')
subv %in% v
subv <- c('a', 'f')
!(subv %in% v)
check_color_code(temp)
check_color_code(temp)
devtools::document()
?check_color_code
?warning
1[5]
c(1)[6]
mean(NA)
mean(NA, na.rm = T)
#' \code{color_map_Spectral} maps numeric values between 0 and 1 to hex codes
#'
#' @param x A numeric vector whose entries are between 0 and 1.
#'
#' @return A vector of hex codes.
#' @export
#'
#' @examples
#'
#'
color_map_Spectral = function(x){
color_temp = colorRamp(brewer.pal(11,"Spectral"))(x)
color_hex = rgb(color_temp[,1], color_temp[,2], color_temp[,3], maxColorValue = 255)
return(color_hex)
}
color_map_Spectral((1:5)/5)
?set.seed
#' Chicken foot simulation data generator
#'
#' \code{chicken_generator} generates chicken foot simulation data.
#'
#' @param seed A scaler determining the seed to be used.
#'
#' @return
#' @export
#'
#' @examples
chicken_generator = function(seed = 1) {
library(MASS)
set.seed(seed)
x_1 = 0:20
y_1 = 2*x_1
d1 = cbind(1, x_1, y_1)
x_2 = -x_1
y_2 = y_1
d2 = cbind(2, x_2, y_2)
x_3 = 0
y_3 = 0:(-20)
d3 = cbind(4, x_3, y_3)
x_4 = 0
y_4 = 0:20*2
d4 = cbind(3, x_4, y_4)
d = rbind(d1, d2, d3, d4)
d = cbind(d, 0)
dd = NULL
for(i in 1:nrow(d)) {
tmp = mvrnorm(n=5, mu = as.vector(d[i,2:4]), Sigma = 0.7*diag(3))
tmp = cbind(d[i,1], tmp)
dd = rbind(dd, (tmp))
}
dd = rbind(dd, cbind(4, mvrnorm(n=30, mu = c(0,-0.5,0), Sigma = diag(c(16,8,1))) ))
dd = as.data.frame(dd)
colnames(dd) = c("Group","X", "Y", "Z")
dd$Y = dd$Y - min(dd$Y)
dd$X = dd$X - min(dd$X)
dd$Z = dd$Z - min(dd$Z)
dd$X = dd$X/max(dd$X + 0.01)
dd$Y = dd$Y/max(dd$Y + 0.01)
dd$Z = dd$Z/max(dd$Z + 0.01)/5
return(dd)
}
a = chicken_generator(1)
dim(a)
table(a$Group)
